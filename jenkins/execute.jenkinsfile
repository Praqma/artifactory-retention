properties([
  buildDiscarder(
    logRotator(artifactDaysToKeepStr: '', artifactNumToKeepStr: '', daysToKeepStr: '', numToKeepStr: '5')
  )
])

if (env.BRANCH_NAME != 'master') {
  println 'Only running retention on the master branch'
  return
}

node('master') {
  stage('checkout') {
    deleteDir()
    checkout scm
  }

  stage('expand templates') {
    docker.image('groovy:2.5-jre8').inside {
      sh 'sh expandTemplates.sh'
    }
  }

  stage('prepare cleanup') {
    def aqlFiles = findFiles(glob: 'aql/artifact/*.aql')
    // Create a map: <repositoryName:buildClosure>
    builds = aqlFiles.collectEntries { aql ->
      String repoName = aql.name - '.aql' - 'template-'
      return [
        (repoName.toLowerCase()):{
          docker.image('groovy:2.5-jre8').inside {
            withCredentials([
              usernamePassword(
                credentialsId: 'artifactory-user',
                usernameVariable: 'username',
                passwordVariable: 'password'
              )
            ]) {
              sh "sh runRetention.sh artifacts $repoName $username \'$password\'"
            }
          }
        }
      ]
    }.sort()
  }

  try {
    // Run the builds in parallel in chunks of 10
    chunks = builds.keySet().collate(10).collect { builds.subMap(it) }
    chunks.eachWithIndex { buildsChunk, i ->
      stage("clean repositories (${i+1}/${chunks.size()})") { 
        parallel buildsChunk
      }
    }

    // Cleanup builds without artifacts
    stage('clean empty builds') {
      docker.image('groovy:2.5-jre8').inside {
        withCredentials([
          usernamePassword(
            credentialsId: 'artifactory-user',
            usernameVariable: 'username',
            passwordVariable: 'password'
          )
        ]) {
          sh "sh runRetention.sh builds builds-without-artifacts $username \'$password\'"
        }
      }
    }
  } finally {
    stage('archive') {
      archiveArtifacts 'config/*, result/*, aql/**'
    }
  }
}
