pipeline {
  options { buildDiscarder(logRotator(numToKeepStr: '5')) }

  triggers { pollSCM('H/5 * * * *') }

  agent {
    node {
      label 'master'
    }
  }

  stages {
    stage ('Checkout') {
      steps {
        checkout scm
      }
    }

    stage ('Integrate') {
      when {
        expression {
          return env.BRANCH_NAME != 'master'
        }
      }

      steps {
        withCredentials([sshUserPrivateKey(credentialsId: 'github-ssh', keyFileVariable: 'SSH_KEY')]) {
          sh 'echo ssh -i $SSH_KEY -l git \\"\\$@\\" > with_ssh.sh'
          sh 'chmod +x with_ssh.sh'
          withEnv(['GIT_SSH=with_ssh.sh']) {
            sh 'git remote set-branches --add origin master'
            sh 'git fetch'
            sh "git checkout -b ${env.BRANCH_NAME}"
            sh 'git rebase origin/master'
            sh 'git checkout master'
            sh "git merge --ff-only ${env.BRANCH_NAME}"
          }
        }
      }
    }

    stage ('Verify') {
      steps {
          sh 'sh gradlew validateAql validateSubscriptions'
      }
    }

    stage ('Publish') {
      when {
        expression {
          return env.BRANCH_NAME =~ /ready\/.*/
        }
      }

      steps {
        withCredentials([sshUserPrivateKey(credentialsId: 'github-ssh', keyFileVariable: 'SSH_KEY')]) {
          sh 'echo ssh -i $SSH_KEY -l git \\"\\$@\\" > with_ssh.sh'
          sh 'chmod +x with_ssh.sh'
          withEnv(['GIT_SSH=with_ssh.sh']) {
            sh 'git push origin master'
            sh "git push origin :${env.BRANCH_NAME}"
          }
        }
      }
    }
  }
}
